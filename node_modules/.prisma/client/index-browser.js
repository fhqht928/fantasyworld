
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  positionX: 'positionX',
  positionY: 'positionY',
  reputation: 'reputation',
  notoriety: 'notoriety',
  maxHp: 'maxHp',
  maxMp: 'maxMp',
  isOnline: 'isOnline'
};

exports.Prisma.NPCScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gender: 'gender',
  birthYear: 'birthYear',
  deathYear: 'deathYear',
  isAlive: 'isAlive',
  mood: 'mood',
  fame: 'fame',
  notoriety: 'notoriety',
  cityId: 'cityId',
  partnerId: 'partnerId',
  parent1Id: 'parent1Id',
  parent2Id: 'parent2Id',
  isNoble: 'isNoble',
  nobleTitle: 'nobleTitle',
  personality: 'personality',
  background: 'background',
  job: 'job',
  skills: 'skills',
  languageId: 'languageId',
  religionId: 'religionId'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  population: 'population',
  countryId: 'countryId'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  language: 'language'
};

exports.Prisma.WildAreaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  dangerLevel: 'dangerLevel',
  countryId: 'countryId',
  cityId: 'cityId'
};

exports.Prisma.DungeonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  levelRequirement: 'levelRequirement',
  isRaid: 'isRaid',
  countryId: 'countryId',
  cityId: 'cityId'
};

exports.Prisma.QuestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  isTaken: 'isTaken',
  takenAt: 'takenAt',
  completedAt: 'completedAt',
  reputationRequired: 'reputationRequired',
  notorietyTrigger: 'notorietyTrigger',
  issuerId: 'issuerId',
  takerId: 'takerId',
  bountyTargetId: 'bountyTargetId',
  metadata: 'metadata'
};

exports.Prisma.PlayerProfessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  skillLevel: 'skillLevel',
  experience: 'experience'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  quality: 'quality'
};

exports.Prisma.ItemInstanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  quantity: 'quantity'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  profession: 'profession',
  difficulty: 'difficulty',
  productId: 'productId'
};

exports.Prisma.RecipeMaterialScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  itemId: 'itemId',
  quantity: 'quantity'
};

exports.Prisma.CorpseScalarFieldEnum = {
  id: 'id',
  npcId: 'npcId',
  userId: 'userId',
  type: 'type',
  decayStage: 'decayStage',
  location: 'location',
  causeOfDeath: 'causeOfDeath',
  isWaterlogged: 'isWaterlogged',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnimalPopulationScalarFieldEnum = {
  id: 'id',
  species: 'species',
  type: 'type',
  population: 'population',
  areaId: 'areaId'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isAncient: 'isAncient',
  region: 'region'
};

exports.Prisma.UserLanguageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  languageId: 'languageId',
  fluency: 'fluency'
};

exports.Prisma.ReligionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  originRegion: 'originRegion',
  description: 'description',
  doctrine: 'doctrine',
  influenceLevel: 'influenceLevel',
  estimatedFollowers: 'estimatedFollowers'
};

exports.Prisma.ArtifactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  lore: 'lore',
  powerHint: 'powerHint',
  religionId: 'religionId'
};

exports.Prisma.GlobalEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  affectedRegion: 'affectedRegion',
  description: 'description',
  durationDays: 'durationDays',
  impact: 'impact',
  isActive: 'isActive',
  startedAt: 'startedAt',
  endedAt: 'endedAt'
};

exports.Prisma.WeatherScalarFieldEnum = {
  id: 'id',
  cityId: 'cityId',
  condition: 'condition',
  updatedAt: 'updatedAt'
};

exports.Prisma.NPCStoryScalarFieldEnum = {
  id: 'id',
  npcId: 'npcId',
  title: 'title',
  summary: 'summary',
  createdAt: 'createdAt'
};

exports.Prisma.PlayerTitleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  region: 'region',
  grantedAt: 'grantedAt',
  authority: 'authority'
};

exports.Prisma.EconomyScalarFieldEnum = {
  id: 'id',
  cityId: 'cityId',
  item: 'item',
  price: 'price',
  demand: 'demand',
  supply: 'supply'
};

exports.Prisma.WorldTimeScalarFieldEnum = {
  id: 'id',
  lastSimulated: 'lastSimulated'
};

exports.Prisma.WorldSnapshotScalarFieldEnum = {
  id: 'id',
  label: 'label',
  jsonData: 'jsonData',
  createdAt: 'createdAt'
};

exports.Prisma.TaxPolicyScalarFieldEnum = {
  id: 'id',
  region: 'region',
  rate: 'rate',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  NPC: 'NPC',
  City: 'City',
  Country: 'Country',
  WildArea: 'WildArea',
  Dungeon: 'Dungeon',
  Quest: 'Quest',
  PlayerProfession: 'PlayerProfession',
  Item: 'Item',
  ItemInstance: 'ItemInstance',
  Recipe: 'Recipe',
  RecipeMaterial: 'RecipeMaterial',
  Corpse: 'Corpse',
  AnimalPopulation: 'AnimalPopulation',
  Language: 'Language',
  UserLanguage: 'UserLanguage',
  Religion: 'Religion',
  Artifact: 'Artifact',
  GlobalEvent: 'GlobalEvent',
  Weather: 'Weather',
  NPCStory: 'NPCStory',
  PlayerTitle: 'PlayerTitle',
  Economy: 'Economy',
  WorldTime: 'WorldTime',
  WorldSnapshot: 'WorldSnapshot',
  TaxPolicy: 'TaxPolicy'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
